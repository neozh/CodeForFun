package com.neo.thread;

import java.util.Random;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class CountDownLatchDemo implements Runnable {
	static final CountDownLatch end = new CountDownLatch(10);
	static int nameIndex ;
	static final CountDownLatchDemo demo = new CountDownLatchDemo(nameIndex);
	
	private String name;
	
	public CountDownLatchDemo(int name )
	{
		nameIndex = name + 1;
		this.name = String.valueOf(name);
		
	}
	
	
	@Override
	public void run() 
	{
		try 
		{
			Thread.sleep(new Random().nextInt(10)* 1000);
			System.out.println("check complete: " + this.name);
			end.countDown();
		} catch (InterruptedException e) {
			
			e.printStackTrace();
		}

	}

	public static void main(String[] args) throws InterruptedException 
	{
		ExecutorService exec = Executors.newFixedThreadPool(10);
		for (int i = 0; i < 10; i++) {
			exec.submit(demo);
		}

		end.await();
		
		System.out.println("fire");
		exec.shutdown();
	}

}
